install.packages("ggplot2")
install.packages("gplots")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("plyr")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("grid", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("RCurl")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("reshape2")
library("reshape2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("gplots", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
require("ggplot2")
require("ggthemes")
require("gplots")
require("grid")
require("RCurl")
require("reshape2")
require("rstudio")
require("tableplot")
require("tidyr")
require("dplyr")
require("jsonlite")
require("extrafont")
require("lubridate")
source('~/DataVisualization/DrCannada/.Rprofile')
setwd("~/DV_RProject2/01 Data")
#Before running this R file make sure you set you working directory to where the CSV file located.
file_path <- "azdrg112.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("Customer_ID", "Order_ID", "Postal_Code", "Row_ID", "Discount", "Gross_Profit_Ratio" , "Number_of_Records", "Order_Quantity", "Product_Base_Margin", "Profit", "Sales", "Shipping_Cost", "Unit_Price")
#measures <- NA # Do this if there are no measures.
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
#dimensions
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
library(lubridate)
# Fix date columns, this needs to be done by hand because | needs to be correct.
#                                                        \_/
df$Order_Date <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Order_Date), tz="UTC")))
df$Ship_Date  <- gsub(" [0-9]+:.*", "", gsub(" UTC", "", mdy(as.character(df$Ship_Date),  tz="UTC")))
# The following is an example of dealing with special cases like making state abbreviations be all upper case.
# df["State"] <- data.frame(lapply(df["State"], toupper))
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
#Before running this R file make sure you set you working directory to where the CSV file located.
file_path <- "azdrg112.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
require("jsonlite")
require("RCurl")
# Change the USER and PASS below to be your UTEid
df <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from titanic where sex is not null"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_UTEid', PASS='orcl_UTEid', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE), ))
df
summary(df)
str(df)
source('~/DV_RProject2/01 Data/R_ETL_Project2.R')
#Before running this R file make sure you set you working directory to where the CSV file located.
file_path <- "azdrg112.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
setwd("~/DV_RProject2/01 Data")
#Before running this R file make sure you set you working directory to where the CSV file located.
file_path <- "HI.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
Newdf <- subset(df, select = c("whrswk","hhi","whi","hhi2","education","race","hispanic","experience","kidslt6","kids618","husby","region"))
head(Newdf)
str(df) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
str(Newdf) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
#Before running this R file make sure you set you working directory to where the CSV file located.
file_path <- "HI.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
Newdf <- subset(df, select = c("whrswk","hhi","whi","hhi2","education","race","hispanic","experience","kidslt6","kids618","husby","region"))
head(Newdf)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(Newdf) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("whrswk", "experience", "kidslt6", "kids618", "husby")
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
#dimensions
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
}
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
#Before running this R file make sure you set you working directory to where the CSV file located.
file_path <- "HI.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
Newdf <- subset(df, select = c("whrswk","hhi","whi","hhi2","education","race","hispanic","experience","kidslt6","kids618","husby","region"))
#head(Newdf)
# Replace "." (i.e., period) with "_" in the column names.
names(Newdf) <- gsub("\\.+", "_", names(Newdf))
str(Newdf) # Uncomment this and  run just the lines to here to get column types to use for getting the list of measures.
measures <- c("whrswk", "experience", "kidslt6", "kids618", "husby")
# Get rid of special characters in each column.
# Google ASCII Table to understand the following:
for(n in names(Newdf)) {
Newdf[n] <- data.frame(lapply(Newdf[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(Newdf), measures)
#dimensions
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
Newdf[d] <- data.frame(lapply(Newdf[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
Newdf[d] <- data.frame(lapply(Newdf[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
Newdf[d] <- data.frame(lapply(Newdf[d], gsub, pattern=":",replacement= ";"))
}
}
# Get rid of all characters in measures except for numbers, the - sign, and period.dimensions
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
Newdf[m] <- data.frame(lapply(Newdf[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(Newdf, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
tableName <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", tableName, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
